---

// blog
import { getNsports } from "../../library/microcms";
const resnublog = await getNsports({ fields: ["id", "title", "image", "date"] });

import moment from "moment";
let setdate = function (str:any) {
  return moment(str).utc().format('YYYY-MM-DD');
};

---

<div class="tw-relative">
  <div class="close_button tw-hidden">×</div>
  <canvas id="renderCanvasBanner" class="tw-hidden"></canvas>
</div>

<section id="renderCard" aria-label="golf_slider">
	<ul class="card-wrap tw-flex tw-flex-wrap tw-gap-[10px] tw-mr-[-10px] tw-z-[10] sm:tw-gap-[20px] sm:tw-mr-[0px]">
		{
			resnublog.contents.map((content: any) => (
				<li class="cart-wrap-inner splide__slide">
          <img
            data-width-x={content.image.width}
            data-width-y={content.image.height}
            src={content.image.url}
            alt={content.title}
            decoding="auto"
            class="tw-w-[100%]"
          >
				</li>				
			))
		}
	</ul>
</section>

<script type="text/javascript">
    const button_targets = document.querySelectorAll('.cart-wrap-inner');
    for(let i = 0; i < button_targets.length; i++){
      button_targets[i].addEventListener("click",(e) => {
        if (e.target.tagName === 'IMG') {
            const src = e.target.getAttribute('src');
            const width = e.target.getAttribute('data-width-x');
            const height = e.target.getAttribute('data-width-y');
            document.getElementById('renderCanvasBanner').classList.remove('tw-hidden');
            document.getElementById('renderCard').classList.add('tw-hidden');
            document.querySelector('.close_button').classList.remove('tw-hidden');
            mainbanner(src, width, height);
        }
      }, false);
    }

  document.querySelector('.close_button').addEventListener("click",(e) => { 
    document.getElementById('renderCanvasBanner').classList.add('tw-hidden');
    document.getElementById('renderCard').classList.remove('tw-hidden');
    document.querySelector('.close_button').classList.add('tw-hidden');
  });

  function mainbanner(src, width, height) {

    // バナーレンダリング
    function bnrrenderfunction() {

      const canvasbanner = document.getElementById('renderCanvasBanner');
      const engine = new BABYLON.Engine(canvasbanner);  

      const createScene = function () {
        const scene = new BABYLON.Scene(engine);
        scene.clearColor = new BABYLON.Color4(0,0,0,0); 

        const camera = new BABYLON.ArcRotateCamera("camera", -Math.PI / 2, Math.PI / 2, 10, new BABYLON.Vector3(0, 0, 0));
        camera.position = new BABYLON.Vector3(0.18, 0.18, 1.8);
        camera.attachControl(canvasbanner, true);

        // ライトを作成
        const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(1, 0, 1), scene);
              light.intensity = 1;

        // ブロックを作成
        // マテリアルをセットする
        const boxMat = new BABYLON.StandardMaterial("boxMat");

        // ボックス型のジオメトリをセットする
        console.log(String(width).length);
        console.log(String(height).length);

        switch(true) {
          case String(width).length === 5 || String(height).length === 5:
            var wfix = width / 10000;
            var hfix = height / 10000;
            break;          
          case String(width).length === 4 || String(height).length === 4:
            var wfix = width / 1000;
            var hfix = height / 1000;
            break;
          case String(width).length === 3 || String(height).length === 3:
            var wfix = width / 100;
            var hfix = height / 100;            
            break;
          case String(width).length === 2 || String(height).length === 2:
            var wfix = width / 10;
            var hfix = height / 10;
            break;  
          default:
            var wfix = width;
            var hfix = height;
            break;  
        }

        const box = BABYLON.MeshBuilder.CreateBox("box", {height: hfix, width: wfix, depth: 0.01, wrap: true});

        // テクスチャをセットする
        const get_render = document.querySelector('#renderCard li img');
        const get_images = src !== null
                ? src
                : get_render.getAttribute('src');


        if( get_images !== null )
            boxMat.diffuseTexture = new BABYLON.Texture(get_images);
            box.material = boxMat;
            return scene;
          };

          const scene = createScene();
          
          engine.runRenderLoop(() => {
            scene.render();
          });
          
          window.addEventListener('resize', () => {
            engine.resize();
          });
        }

    bnrrenderfunction();

  }
  window.addEventListener('DOMContentLoaded', mainbanner());
</script>


<style>
  #renderCanvasBanner {
    position: fixed;
    width: 100%;
    height: 100vh;
    top: 0;
    left: 100%;
    transform: translate(-100%, 0);
  }
  .card-wrap {
	  height: calc(100vh - 8rem);
    overflow: scroll;
    padding: 2rem;
    top: 50%;
    right: 50%;
    transform: translate(50%,-50%);
    position: absolute;
    width: 30%;
    display: grid;
    grid-template-columns: 100%;
  }
  .cart-wrap-inner {
    backdrop-filter: blur(10px);
    padding: 2rem;
    border: 1px solid rgba(255, 255, 255, 0.4);
    border-right-color: rgba(255, 255, 255, 0.2);
    border-bottom-color: rgba(255, 255, 255, 0.2);
    border-radius: 5px;	
    cursor: pointer;
  }
  .close_button {
    position: fixed;
    top: 10vh;
    right: 50px;
    width: 30px;
    font-size: 50px;
    line-height: 30px;
    cursor: pointer;
    z-index: 10;
  }
</style>