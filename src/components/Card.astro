---
import { getNsports } from "../../library/microcms";
import Svg from '../components/Svg.astro';
const resnsports = await getNsports( { fields: ["id", "title", "image", "date"] } );
---

<div class="tw-relative">
  <div class="close_button tw-hidden tw-fixed tw-top-[74px] tw-right-[20px] tw-w-[30px] tw-text-[50px] tw-leading-[30px] tw-cursor-pointer tw-z-[10]">
    <Svg name="close"/>
  </div>
  <canvas
    id="renderCanvasList"
    class="tw-fixed tw-w-[100%] tw-h-[100%] tw-top-[0px] tw-left-[0px]"
    data-sports={resnsports.contents.map((content: any) => content.image.url + '|' + content.image.width + '|' + content.image.height  + '|' + content.title)}
  >
  </canvas> 
  <canvas
    id="renderCanvasBanner"
    class="tw-animate-card-fadein tw-animate-card-fadein-adjustment tw-hidden tw-fixed tw-w-[100%] tw-h-[100vh] tw-top-[0] tw-left-[0] tw-opacity-0">
  </canvas>
</div>

<script type="text/javascript">
  
  // カルーセル・背景動作切り替えスイッチ
  class MoveSwitch {
    constructor() {
      this.js_button = document.getElementsByClassName('js-caroucel-button');
      this.switch();
    }
    switch(isdata) {
      switch(true) {
        case isdata != undefined:
          switch(true) {
            case isdata.target.getAttribute('id') === 'background_switch':
              document.getElementById('caoucel_switch').classList.add('tw-opacity-50')
              document.getElementById('caoucel_switch').classList.remove('tw-filter-drow-shadow');
              document.getElementById('background_switch').classList.remove('tw-opacity-50')
              document.getElementById('background_switch').classList.add('tw-filter-drow-shadow');
              document.getElementById('renderCanvasList').classList.add('tw-pointer-events-none');
              document.getElementById('renderCanvasBanner').classList.add('tw-pointer-events-none');
              document.getElementById('renderCanvasList').classList.add('tw-opacity-50');
              document.getElementById('renderCanvasBanner').classList.add('!tw-opacity-50');
              break;
            default:
              document.getElementById('caoucel_switch').classList.remove('tw-opacity-50')
              document.getElementById('caoucel_switch').classList.add('tw-filter-drow-shadow');
              document.getElementById('background_switch').classList.add('tw-opacity-50')
              document.getElementById('background_switch').classList.remove('tw-filter-drow-shadow');
              document.getElementById('renderCanvasList').classList.remove('tw-pointer-events-none');
              document.getElementById('renderCanvasList').classList.remove('tw-opacity-50');
              document.getElementById('renderCanvasBanner').classList.remove('tw-pointer-events-none');
              document.getElementById('renderCanvasBanner').classList.remove('!tw-opacity-50');
              break;
          }      
          break;
        default:
          break;
      }
    }
  }
  const moveswitch = new MoveSwitch();
  for(let i = 0; i < moveswitch.js_button.length; i++){
    moveswitch.js_button[i].addEventListener("click",(e) => {
      moveswitch.switch(e);
    });
  }

  // フォトギャラリー一覧・詳細
  class Carousel {
    constructor() {
      this.degree();
      this.bannerlist();
      this.createScene();
      this.mainbanner();
    }
    degree(degrees) {
      // 度数を取得
      switch(true) {
        case degrees !== undefined:
          return degrees * (Math.PI / 180);
          break;
        default:
          return null;
          break;
      }
    }
    bannerlist() {
      // バナーリストを表示
      const canvassports = document.getElementById('renderCanvasList');
      const engine = new BABYLON.Engine(canvassports);  
      const scene = this.createScene(this.degree, this.mainbanner, engine, canvassports);
      engine.runRenderLoop(() => {
        scene.render();
      });
      window.addEventListener('resize', () => {
        engine.resize();
      });
    }
    createScene(degree, mainbanner, engine, canvassports) {
      // シーンを作成
      switch(true) {
        case !( mainbanner == undefined && degree == undefined ):   
            // シーンを作成
            const scene = new BABYLON.Scene(engine);
            scene.clearColor = new BABYLON.Color4(0,0,0,0); 

            // カメラを作成
            const camera = new BABYLON.ArcRotateCamera("camera2", -Math.PI / 2,  Math.PI / 2, 20, BABYLON.Vector3.Zero(), scene);
            camera.attachControl(canvassports, true);
            camera.useAutoRotationBehavior = true;
            camera.autoRotationBehavior.idleRotationSpeed = Math.PI * 10 / 180;  

            // ライトを作成
            const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(1, 1, 0), scene);
            light.diffuse = new BABYLON.Color3(1, 1, 1);
            light.specular = new BABYLON.Color3(1, 1, 1);
            light.groundColor = new BABYLON.Color3(1, 1, 1);

            // ギャラリーリストを作成
            const canvaslist = canvassports.dataset.sports;
            const canvaslistsplit = canvaslist.split(',');
            canvaslistsplit.forEach(function( value, index ) {
              const boxMat = new BABYLON.StandardMaterial("boxMat");
              const value_split = value.split('|');

              // 比率を計算する
              const hfix =  ( ( canvaslistsplit.length / 2.5 ) * value_split[2] ) / value_split[1];
              const wfix =  canvaslistsplit.length / 2.5;

              const box = BABYLON.MeshBuilder.CreatePlane("box", {height: hfix, width: wfix, sideOrientation: BABYLON.Mesh.DOUBLESIDE});
              box.rotation.y = degree( index * ( 360 / canvaslistsplit.length ) );

              box.position.x = - ( canvaslistsplit.length / 1.2 * Math.sin( degree( index * ( 360 / canvaslistsplit.length ) ) ) );
              box.position.y = 0;
              box.position.z = - ( canvaslistsplit.length / 1.2 * Math.cos( degree( index * ( 360 / canvaslistsplit.length ) ) ) );

              //　テクスチャをはる
              boxMat.diffuseTexture = new BABYLON.Texture(value_split[0]);
              box.material = boxMat;

              // クリックイベントを作る
              box.actionManager = new BABYLON.ActionManager(scene);
              box.actionManager.registerAction(new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnDoublePickTrigger, function () {
                const target = canvaslistsplit[index];
                const target_split = target.split('|');
                document.getElementById('renderCanvasList').classList.add('tw-hidden');
                document.getElementById('renderCanvasBanner').classList.remove('tw-hidden');
                document.querySelector('.close_button').classList.remove('tw-hidden');
                mainbanner(target_split[0], target_split[1], target_split[2]);
              }));
            });
            return scene;
          break;
        default:
          break;
      }
    }
    mainbanner(src, width, height) {

      // バナーレンダリング
      const canvasbanner = document.getElementById('renderCanvasBanner');
      const engine = new BABYLON.Engine(canvasbanner);  

      const detailScenes = function () {

        // シーンを作成
        const scene = new BABYLON.Scene(engine);
        scene.clearColor = new BABYLON.Color4(0,0,0,0); 

        // カメラを作成
        const camera = new BABYLON.ArcRotateCamera("camera", -Math.PI / 2,  Math.PI / 2, 18, BABYLON.Vector3.Zero(), scene);
        camera.attachControl(canvasbanner, true);

        // ライトを作成
        const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(1, 1, 0), scene);
        light.diffuse = new BABYLON.Color3(1, 1, 1);
        light.specular = new BABYLON.Color3(1, 1, 1);
        light.groundColor = new BABYLON.Color3(1, 1, 1);      

        // ブロックを作成
        // マテリアルをセットする
        const boxMat = new BABYLON.StandardMaterial("boxMat");

        // ボックス型のジオメトリをセットする
        switch(true) {
          case String(width).length === 5 || String(height).length === 5:
            var wfix = width / 1000;
            var hfix = height / 1000;
            break;          
          case String(width).length === 4 || String(height).length === 4:
            var wfix = width / 100;
            var hfix = height / 100;
            break;
          case String(width).length === 3 || String(height).length === 3:
            var wfix = width / 10;
            var hfix = height / 10;            
            break;
          default:
            var wfix = width;
            var hfix = height;
            break;  
        }

        // SP・PC判定処理
        switch(true) {
          case window.matchMedia('(max-width:780px)').matches:
            const spwfix = window.innerWidth;
            const sphfix = (window.innerWidth * hfix ) / wfix;
            wfix = spwfix / 50;
            hfix = sphfix / 50;
            break;
          default:
            break;            
        }
        const box = BABYLON.MeshBuilder.CreatePlane("box", {height: hfix, width: wfix, sideOrientation: BABYLON.Mesh.DOUBLESIDE});

        // テクスチャをセットする
        if( src !== null ) {
            boxMat.diffuseTexture = new BABYLON.Texture(src);
            box.material = boxMat;
            return scene;
        }
      };
      
      const scene = detailScenes();
      
      engine.runRenderLoop(() => {
        scene.render();
      });
      
      window.addEventListener('resize', () => {
        engine.resize();
      });
    }
  }
  const carousel = new Carousel();

  document.querySelector('.close_button').addEventListener("click",(e) => { 
    document.getElementById('renderCanvasBanner').classList.add('tw-hidden');
    document.getElementById('renderCanvasList').classList.remove('tw-hidden');
    document.querySelector('.close_button').classList.add('tw-hidden');
  });

</script>