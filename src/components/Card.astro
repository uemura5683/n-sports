---

// blog
import { getNsports } from "../../library/microcms";
const resnublog = await getNsports({ fields: ["id", "title", "image", "date"] });

import moment from "moment";
let setdate = function (str:any) {
  return moment(str).utc().format('YYYY-MM-DD');
};

---

<div class="tw-relative">
  <div class="close_button tw-hidden">
    <svg width="29" height="28" viewBox="0 0 29 28" fill="none" xmlns="http://www.w3.org/2000/svg">
      <line y1="-1" x2="35.3553" y2="-1" transform="matrix(0.707108 0.707106 -0.707108 0.707106 2.31006 2.30957)" stroke="black" stroke-width="2"/>
      <line y1="-1" x2="35.3553" y2="-1" transform="matrix(0.707108 -0.707106 0.707108 0.707106 2.31006 27.3096)" stroke="black" stroke-width="2"/>
    </svg>
  </div>
  <canvas
    id="renderCanvasList"
    data-blog={resnublog.contents.map((content: any) => content.image.url + '|' + content.image.width + '|' + content.image.height  + '|' + content.title)}
  >
  </canvas>  
  <canvas id="renderCanvasBanner" class="tw-hidden"></canvas>
</div>

<script type="text/javascript">

  const caroucel_button = document.getElementsByClassName('js-caroucel-button');
  for(let i = 0; i < caroucel_button.length; i++){
    caroucel_button[i].addEventListener("click",(e) => {
      console.log(e.target.getAttribute('id'));
      if( e.target.getAttribute('id') === 'background_switch' ) {
          document.getElementById('caoucel_switch').classList.add('tw-opacity-50')
          document.getElementById('caoucel_switch').classList.remove('tw-filter-drow-shadow');
          document.getElementById('background_switch').classList.remove('tw-opacity-50')
          document.getElementById('background_switch').classList.add('tw-filter-drow-shadow');
          document.getElementById('renderCanvasList').classList.add('tw-pointer-events-none');
          document.getElementById('renderCanvasBanner').classList.add('tw-pointer-events-none');
      } else {
          document.getElementById('caoucel_switch').classList.remove('tw-opacity-50')
          document.getElementById('caoucel_switch').classList.add('tw-filter-drow-shadow');
          document.getElementById('background_switch').classList.add('tw-opacity-50')
          document.getElementById('background_switch').classList.remove('tw-filter-drow-shadow');
          document.getElementById('renderCanvasList').classList.remove('tw-pointer-events-none');
          document.getElementById('renderCanvasBanner').classList.remove('tw-pointer-events-none');
      }
    }, false);
  }

  const button_targets = document.querySelectorAll('.cart-wrap-inner');
  for(let i = 0; i < button_targets.length; i++){
    button_targets[i].addEventListener("click",(e) => {
      if (e.target.tagName === 'IMG') {
          const src = e.target.getAttribute('src');
          const width = e.target.getAttribute('data-width-x');
          const height = e.target.getAttribute('data-width-y');
          document.getElementById('renderCanvasBanner').classList.remove('tw-hidden');
          document.querySelector('.close_button').classList.remove('tw-hidden');
          mainbanner(src, width, height);
      }
    }, false);
  }

  document.querySelector('.close_button').addEventListener("click",(e) => { 
    document.getElementById('renderCanvasBanner').classList.add('tw-hidden');
    document.getElementById('renderCanvasList').classList.remove('tw-hidden');
    document.querySelector('.close_button').classList.add('tw-hidden');
  });

  function degree(degrees) {
    return degrees * (Math.PI / 180);
  }

  function bannerlist() {
    const canvasblog = document.getElementById('renderCanvasList');
    const engine = new BABYLON.Engine(canvasblog);  

    const createScene = function () {

        // シーンを作成
        const scene = new BABYLON.Scene(engine);
        scene.clearColor = new BABYLON.Color4(0,0,0,0); 

        // カメラを作成
        const camera = new BABYLON.ArcRotateCamera("camera2", -Math.PI / 2,  Math.PI / 2, 20, BABYLON.Vector3.Zero(), scene);
        camera.attachControl(canvasblog, true);
        camera.useAutoRotationBehavior = true;
        camera.autoRotationBehavior.idleRotationSpeed = Math.PI * 10 / 180;  

        // ライトを作成
        const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(1, 1, 0), scene);
        light.diffuse = new BABYLON.Color3(1, 1, 1);
        light.specular = new BABYLON.Color3(1, 1, 1);
        light.groundColor = new BABYLON.Color3(1, 1, 1);

        // ギャラリーリストを作成
        const canvaslist = canvasblog.dataset.blog;
        const canvaslistsplit = canvaslist.split(',');
        canvaslistsplit.forEach(function( value, index ) {
          const boxMat = new BABYLON.StandardMaterial("boxMat");

          value_split = value.split('|');

          // 比率を計算する
          hfix =  ( ( canvaslistsplit.length / 2.5 ) * value_split[2] ) / value_split[1];
          wfix =  canvaslistsplit.length / 2.5;

          const box = BABYLON.MeshBuilder.CreatePlane("box", {height: hfix, width: wfix, sideOrientation: BABYLON.Mesh.DOUBLESIDE});
          box.rotation.y = degree( index * ( 360 / canvaslistsplit.length ) );

          box.position.x = - ( canvaslistsplit.length / 1.2 * Math.sin( degree( index * ( 360 / canvaslistsplit.length ) ) ) );
          box.position.y = 0;
          box.position.z = - ( canvaslistsplit.length / 1.2 * Math.cos( degree( index * ( 360 / canvaslistsplit.length ) ) ) );

          //　テクスチャをはる
          boxMat.diffuseTexture = new BABYLON.Texture(value_split[0]);
          box.material = boxMat;

          // クリックイベントを作る
          box.actionManager = new BABYLON.ActionManager(scene);
          box.actionManager.registerAction(new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnDoublePickTrigger, function () {
            const target = canvaslistsplit[index];
            target_split = target.split('|');

            document.getElementById('renderCanvasList').classList.add('tw-hidden');

            document.getElementById('renderCanvasBanner').classList.remove('tw-hidden');
            document.querySelector('.close_button').classList.remove('tw-hidden');
            mainbanner(target_split[0], target_split[1], target_split[2]);
          }));
        });
        return scene;
    }
    const scene = createScene();
    engine.runRenderLoop(() => {
      scene.render();
    });
    window.addEventListener('resize', () => {
      engine.resize();
    });
  }
  window.addEventListener('DOMContentLoaded', bannerlist());

  function mainbanner(src, width, height) {

    // バナーレンダリング
    function bnrrenderfunction() {

      const canvasbanner = document.getElementById('renderCanvasBanner');
      const engine = new BABYLON.Engine(canvasbanner);  

      const createScene = function () {

        // シーンを作成
        const scene = new BABYLON.Scene(engine);
        scene.clearColor = new BABYLON.Color4(0,0,0,0); 

        // カメラを作成
        const camera = new BABYLON.ArcRotateCamera("camera", -Math.PI / 2,  Math.PI / 2, 18, BABYLON.Vector3.Zero(), scene);
        camera.attachControl(canvasbanner, true);

        // ライトを作成
        const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(1, 1, 0), scene);
        light.diffuse = new BABYLON.Color3(1, 1, 1);
        light.specular = new BABYLON.Color3(1, 1, 1);
        light.groundColor = new BABYLON.Color3(1, 1, 1);      

        // ブロックを作成
        // マテリアルをセットする
        const boxMat = new BABYLON.StandardMaterial("boxMat");

        // ボックス型のジオメトリをセットする
        switch(true) {
          case String(width).length === 5 || String(height).length === 5:
            var wfix = width / 1000;
            var hfix = height / 1000;
            break;          
          case String(width).length === 4 || String(height).length === 4:
            var wfix = width / 100;
            var hfix = height / 100;
            break;
          case String(width).length === 3 || String(height).length === 3:
            var wfix = width / 10;
            var hfix = height / 10;            
            break;
          default:
            var wfix = width;
            var hfix = height;
            break;  
        }
        const box = BABYLON.MeshBuilder.CreatePlane("box", {height: hfix, width: wfix, sideOrientation: BABYLON.Mesh.DOUBLESIDE});

        // テクスチャをセットする
        if( src !== null ) {
            boxMat.diffuseTexture = new BABYLON.Texture(src);
            box.material = boxMat;
            return scene;
        }
      };

      const scene = createScene();
      
      engine.runRenderLoop(() => {
        scene.render();
      });
      
      window.addEventListener('resize', () => {
        engine.resize();
      });
    }
    bnrrenderfunction();
  }
</script>

<style>
  #renderCanvasList {
    position: fixed;
    width: 100%;
    height: auto;
    top: 50%;
    left: 100%;
    transform: translate(-100%, -50%);
  }
  #renderCanvasBanner {
    position: fixed;
    width: 100%;
    height: 100vh;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    animation: fadein 0.5s ease-in-out 0s infinite;
    animation-fill-mode: forwards;
    animation-iteration-count: 1;
    opacity: 0;
  }
  @keyframes fadein {
    0% {
        transform: translate(-50%, -50%) scale(0);
        opacity: 0;
    }
    80% {
        transform: translate(-50%, -50%) scale(1.1);
        opacity: 0.8;
    }    
    100% {
        transform: translate(-50%, -50%) scale(1);
        opacity: 1;
    }
  }

  .close_button {
    position: fixed;
    top: 74px;
    right: 20px;
    width: 30px;
    font-size: 50px;
    line-height: 30px;
    cursor: pointer;
    z-index: 10;
  }
  .close_button line {
    filter:
      drop-shadow(0px 0px 1px #ffffff)
      drop-shadow(0px 0px 1px #ffffff);
  }
</style>