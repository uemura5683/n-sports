<canvas id="renderCanvas"></canvas>

<script is:inline src="https://preview.babylonjs.com/babylon.js"></script>
<script is:inline src="https://cdn.babylonjs.com/materialsLibrary/babylon.gridMaterial.js"></script>
<script is:inline src="https://code.jquery.com/pep/0.4.1/pep.js"></script>
<script is:inline src="https://unpkg.com/earcut@latest/dist/earcut.min.js"></script>
<script is:inlune src="https://cdn.babylonjs.com/materialsLibrary/babylon.waterMaterial.js"></script>
<script type="text/javascript">
  function main() {
    const canvas = document.getElementById('renderCanvas');
    const engine = new BABYLON.Engine(canvas);

    function degree(degrees) {
      return degrees * (Math.PI / 180);
    }

    const createScene = function () {
      const scene = new BABYLON.Scene(engine);

      const camera = new BABYLON.ArcRotateCamera("camera", -Math.PI / 2, Math.PI / 2.5, 15, new BABYLON.Vector3(0, 0, 0));
      camera.position = new BABYLON.Vector3(35, 12, 12);
      camera.attachControl(canvas, true);

      const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), scene);
            light.intensity = 0.8;

      // 空
      const skybox = BABYLON.MeshBuilder.CreateBox("skyBox", {size: 1000}, scene);
      const skyboxMaterial = new BABYLON.StandardMaterial("skyBox", scene);
            skyboxMaterial.backFaceCulling = false;

            skyboxMaterial.reflectionTexture = new BABYLON.CubeTexture("textures/sky/skybox", scene);
            skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;

            skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);
            skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);
            skybox.material = skyboxMaterial;
        

      const largeGroundMat = new BABYLON.StandardMaterial("largeGroundMat");
            largeGroundMat.diffuseTexture = new BABYLON.Texture("textures/ground/valleygrass.png");
      
      const largeGround = BABYLON.MeshBuilder.CreateGroundFromHeightMap("largeGround", "textures/ground/villageheightmap.png", {width:72, height:72, subdivisions: 10, minHeight:0, maxHeight: 10});
            largeGround.material = largeGroundMat;
            largeGround.rotation.y = degree(90);
            largeGround.position.y = -0.5;

      // 水を作成
      var waterMesh = BABYLON.Mesh.CreateGround("waterMesh", 15, 15, 15, scene, false);
      var water = new BABYLON.WaterMaterial("water", scene, new BABYLON.Vector2(512, 512));
      water.backFaceCulling = true;
      water.bumpTexture = new BABYLON.Texture("textures/water/waterbump.png", scene);
      water.windForce = -5;
      water.waveHeight = 0.2;
      water.bumpHeight = 0.05;
      water.waterColor = new BABYLON.Color3(0.1, 0.1, 0.6);
      water.colorBlendFactor = 0.5;
      water.addToRenderList(skybox);
      water.addToRenderList(largeGround);
      waterMesh.material = water;
      waterMesh.position.x = 5;      
      waterMesh.position.y = .1;
      waterMesh.position.z = 28;         

      // 木を作成
      const spritetree = new BABYLON.SpriteManager("treesManager", "textures/wood/wood.png", 1000, {width: 618, height: 680}, scene);

        for (let i = 0; i < 500; i++) {

          switch(true) {
            case i > 400:
              const tree2 = new BABYLON.Sprite("tree", spritetree);
              tree2.width = 2;
              tree2.height = 3;              
              tree2.position.x = Math.random() * (10) - 17;
              tree2.position.z = Math.random() * -7  - 1;
              tree2.position.y = 3;
            default:
              const tree3 = new BABYLON.Sprite("tree", spritetree);
              tree3.width = 2;
              tree3.height = 3;                 
              tree3.position.x = Math.random() * (-12) + 18;
              tree3.position.z = Math.random() * 20 + 3;
              tree3.position.y = 3;
          }
        }


      /*
      var frameRate = 10;

      var yrotation = new BABYLON.Animation("yrotation", "rotation.y", frameRate, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);

      var keyFramesR = []; 

      keyFramesR.push({
          frame: 0,
          value: 0
      });

      keyFramesR.push({
          frame: 1 * frameRate,
          value: 1 * Math.PI
      });

      keyFramesR.push({
          frame: 2 * frameRate,
          value: 2 * Math.PI
      });

      yrotation.setKeys(keyFramesR);

      scene.beginDirectAnimation(largeGround, [yrotation], 0, 2 * frameRate, true);
      */


      return scene;
    };


    const scene = createScene();
    
    engine.runRenderLoop(() => {
      scene.render();
    });
    
    window.addEventListener('resize', () => {
      engine.resize();
    });
  }
  window.addEventListener('DOMContentLoaded', main);
</script>

<style is:global>
	#renderCanvas {
		width   : 100%;
		height  : 100%;
		touch-action: none;
		position: absolute;
		top:0;
		left: 0;
	}
</style>