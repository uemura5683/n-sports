<canvas id="renderCanvas" class="tw-rendercanvas"></canvas>

<script type="text/javascript">
  class LightDarkmode {
    constructor() {
      this.degree();
      this.mode_switch = document.getElementsByClassName('js-mode-button');
      this.clickevent( this.mode_switch );
      this.light_dark();
      this.renderfunction();
      this.createScene();
      this.pointerLight();
      this.sky_ground_water_setting();
      this.tea_setting();
      this.cup_setting();
      this.tree_setting();
      this.lump_setting();
      this.fountain_setting();
    }
    degree(degrees) {
      // 度数を取得
      switch(true) {
        case degrees !== undefined:
          return degrees * (Math.PI / 180);
          break;
        default:
          return null;
          break;
      }
    }
    clickevent(target) {
      // ライトモード・ダークモードをクリックした時の処理
      for(let i = 0; i < target.length; i++){
        target[i].addEventListener("click",(e) => {
          this.light_dark(e.target.getAttribute('id'));
        }, false);
      }
    }
    light_dark(target) {
      // ライトモード・ダークモードの処理
      switch(true) {
        case target === 'dark':
          document.getElementById('light').classList.add('tw-opacity-50');        
          document.getElementById('light').classList.remove('tw-filter-drow-shadow');
          document.getElementById('dark').classList.add('tw-filter-drow-shadow');
          document.getElementById('dark').classList.remove('tw-opacity-50');
          break;
        default:
          document.getElementById('light').classList.add('tw-filter-drow-shadow');        
          document.getElementById('light').classList.remove('tw-opacity-50');
          document.getElementById('dark').classList.add('tw-opacity-50');
          document.getElementById('dark').classList.remove('tw-filter-drow-shadow');
          break;          
      }
      const canvas = document.getElementById('renderCanvas');
            canvas.remove();
      const canvas_element = document.createElement('canvas');
            canvas_element.setAttribute("id",'renderCanvas');
      const main = document.getElementsByTagName("main");
            main[0].prepend(canvas_element);
      const new_canvas = document.getElementById('renderCanvas');
            new_canvas.classList.add('tw-rendercanvas');      
      const engine = new BABYLON.Engine(new_canvas);

      this.renderfunction(target);
    }
    renderfunction(light_dark) {
        // ビジュアルをレンダリングする
        const loading = document.getElementById("js-loading");
        const canvas = document.getElementById('renderCanvas');
        const engine = new BABYLON.Engine(canvas);      
        const scene = this.createScene( this.degree, light_dark, engine, canvas );
        
        loading.classList.remove('tw-hidden');

        engine.runRenderLoop(() => {
          scene.render();
        });
        
        window.addEventListener('resize', () => {
          engine.resize();
        });

        setTimeout(() => {
          loading.classList.add('tw-hidden');
        }, 1000);
    }
    pointerLight(light_dark, scene) {
      // ライト設定
      switch(true) {
        case !( light_dark == undefined && scene == undefined ):
          switch( true ) {
            case light_dark == 'dark':
              const spot = new BABYLON.PointLight("spot", new BABYLON.Vector3(5, 5, 5));
                    spot.diffuse = new BABYLON.Color3(.7, .7, .7);
                    spot.specular = new BABYLON.Color3(0, 0, 0);
                    spot.position.y = 20;
                    spot.position.x = 45;
              const moon = BABYLON.Mesh.CreateSphere("moon", 10, 4);
                    moon.material = new BABYLON.StandardMaterial("moon");
                    moon.material.emissiveColor = new BABYLON.Color3(1, 1, 0);  
                    moon.position.y = 20;
                    moon.position.x = 45;
              break;
            default:
              const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), scene);
                    light.intensity = .6;
              break;
          }
          break;
        default:
          break;
      }
    }
    sky_ground_water_setting(light_dark, degree, scene) {
      // 空・グランド・水を作成
      switch(true) {
        case !( light_dark == undefined && degree == undefined && scene == undefined ):      
          // 空を作成
          const skybox = BABYLON.MeshBuilder.CreateBox("skyBox", {size: 1000}, scene);
          const skyboxMaterial = new BABYLON.StandardMaterial("skyBox", scene);
                skyboxMaterial.backFaceCulling = false;
          const skyboxTexture = light_dark == 'dark'
                              ? "textures/sky_dark/skybox"
                              : "textures/sky/skybox";
                skyboxMaterial.reflectionTexture = new BABYLON.CubeTexture(skyboxTexture, scene);
                skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;
                skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);
                skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);
                skybox.material = skyboxMaterial;

          // グランドを作成
          const largeGroundMat = new BABYLON.StandardMaterial("largeGroundMat");
                largeGroundMat.diffuseTexture = new BABYLON.Texture("textures/ground/valleygrass.png");
          const largeGround = BABYLON.MeshBuilder.CreateGroundFromHeightMap(
                                "largeGround",
                                "textures/ground/villageheightmap.png",
                                { width:72, height:72, subdivisions: 200, minHeight:0, maxHeight: 7.5 }
                              );  
                largeGround.material = largeGroundMat;
                largeGround.rotation.y = degree(90);
                largeGround.position.y = -0.5;      

          // 水を作成
          const waterMesh = BABYLON.Mesh.CreateGround("waterMesh", 30, 40, 10, scene, false);
          const water = new BABYLON.WaterMaterial("water", scene, new BABYLON.Vector2(512, 512));
                water.backFaceCulling = true;
                water.bumpTexture = new BABYLON.Texture("textures/water/waterbump.png", scene);
                water.windForce = -2;
                water.waveHeight = 0;
                water.bumpHeight = 1;
                water.waterColor = new BABYLON.Color3(0.1, 0.1, 0.2);
                water.colorBlendFactor = 0.5;
                water.addToRenderList(skybox);
                water.addToRenderList(largeGround);
                waterMesh.material = water;
                waterMesh.position.x = -11;      
                waterMesh.position.y = 1.6;
                waterMesh.position.z = 16;   
          break;
        default:
          break;
      }
    }
    tea_setting(scene) {
      // ティーを作成する
      switch(true) {
        case scene != undefined:
          const tea = BABYLON.Mesh.CreateSphere("tea", 10, .3);
                tea.material = new BABYLON.StandardMaterial("teamaterial");
                tea.material.diffuseColor = new BABYLON.Color3(1, 1, 1);  
                tea.position.y = 2.4;
                tea.position.x = -25.5;
                tea.position.z = 24;
  
          const tea1 = tea.clone();
                tea1.position.y = 2.4;
                tea1.position.x = -20.5;
                tea1.position.z = 32.5;
  
          const tea_under = BABYLON.MeshBuilder.CreateCylinder("tea_under", {height:.5, diameter: .1});
          const tea_under_material = new BABYLON.StandardMaterial("tea_under_material", scene);
                tea_under_material.diffuseColor = new BABYLON.Color3(0.8, 0.8, 0.8);
                tea_under_material.alpha = .9;
                tea_under.material = tea_under_material;
                tea_under.position.y = 2.3;
                tea_under.position.x = -25.5;
                tea_under.position.z = 24;
  
          const tea_under1 = tea_under.clone();
                tea_under1.position.x = -20.5;
                tea_under1.position.z = 32.5;  
          break;
        default:
          null;        
      }
    }
    cup_setting(degree, scene) {
      // ゴルフカップを作成
      switch(true) {
        case !( degree == undefined && scene == undefined ):
          const golfcup = BABYLON.MeshBuilder.CreateCylinder("golfcup", {height:1, depth:0.1});
          const golfcupMaterial = new BABYLON.StandardMaterial("golfcupmaterial", scene);
                golfcupMaterial.diffuseColor = new BABYLON.Color3(1, 1, 1);
                golfcupMaterial.alpha = 1;
                golfcup.material = golfcupMaterial;
                golfcup.position.x = 32;
                golfcup.position.y = 6.22;
                golfcup.position.z = -10.8;
                golfcup.rotation.z = degree(0);
                golfcup.rotation.x = degree(0);
          break;
        default:
          break;
      }
    }
    tree_setting(light_dark, scene) {
      // 木を作成する
      switch(true) {
        case !( light_dark == undefined && scene == undefined ):
          const elementree = light_dark == 'dark'
                           ? "textures/wood/wood_dark.png"
                           : "textures/wood/wood.png";
          const spritetree = new BABYLON.SpriteManager("treesManager", elementree, 135, {width: 538, height: 680}, scene); 

          for (let i = 0; i < 150; i++) {

            const tree_array = [{w:3,h:4.5,y:3.8},{w:3.2,h:4.8,y:4},{w:3.6,h:5.4,y:4.5},{w:4,h:6,y:5},{w:4.4,h:6.6,y:5.5},{w:4.8,h:7.2,y:6},];
            const tree_data = tree_array[Math.floor(Math.random() * tree_array.length)];

            switch(true) {
              // right side
              case i > 0 && i < 3:
                const treer_1 = new BABYLON.Sprite("tree", spritetree);
                treer_1.width = tree_data.w;
                treer_1.height = tree_data.h;
                treer_1.position.x = Math.random() * (1) - (25 + ((3 * 2 - i * 2 ) * 1.1 ));
                treer_1.position.z = Math.random() * -2  - (11 - ((3 * 2 - i * 2) * 1.3 ));
                treer_1.position.y = tree_data.y;
                break;    
              case i > 3 && i < 8:
                const treer_2 = new BABYLON.Sprite("tree", spritetree);
                treer_2.width = tree_data.w;
                treer_2.height = tree_data.h;              
                treer_2.position.x = Math.random() * (1) - (20 + ((8 * 2 - i * 2) * 1.3 ));
                treer_2.position.z = Math.random() * -1  - (15- ((8 * 2 - i * 2) * .7 ));
                treer_2.position.y = tree_data.y;
                break;   
              case i > 8 && i < 13:
                const treer_3 = new BABYLON.Sprite("tree", spritetree);
                treer_3.width = tree_data.w;
                treer_3.height = tree_data.h;              
                treer_3.position.x = Math.random() * (1) - (17 + ((13 * 2 - i * 2) * 1.3 ));
                treer_3.position.z = Math.random() * -1  - (14 - ((13 * 2 - i * 2) * .4 ));
                treer_3.position.y = tree_data.y;
                break;
              case i > 13 && i < 23:
                const treer_4 = new BABYLON.Sprite("tree", spritetree);
                treer_4.width = tree_data.w;
                treer_4.height = tree_data.h;             
                treer_4.position.x = Math.random() * (1) - (18 + ((18 * 2 - i * 2) * 1.3 ));
                treer_4.position.z = Math.random() * -1  - (22 - ((23 * 2 - i * 2) * .4 ));
                treer_4.position.y = tree_data.y;
                break;
              case i > 23 && i < 28:
                const treer_5 = new BABYLON.Sprite("tree", spritetree);
                treer_5.width = tree_data.w;
                treer_5.height = tree_data.h;              
                treer_5.position.x = Math.random() * (1) + (48 - ((48 * 2 - i * 2) * 1.3 ));
                treer_5.position.z = Math.random() * -1  - (22.5 - ((28 * 2 - i * 2) * .4 ));
                treer_5.position.y = tree_data.y;
                break;
              case i > 28 && i < 38:
                const treer_6 = new BABYLON.Sprite("tree", spritetree);
                treer_6.width = tree_data.w;
                treer_6.height = tree_data.h;              
                treer_6.position.x = Math.random() * 1 + (50 - ((50 * 2 - i * 2) * 1.3 ));
                treer_6.position.z = Math.random() * -1  - (33.5 - ((38 * 2 - i * 2) * .6));
                treer_6.position.y = tree_data.y;
                break;
              case i > 39 && i < 69:
                const treer_7 = new BABYLON.Sprite("tree", spritetree);
                treer_7.width = tree_data.w;
                treer_7.height = tree_data.h;              
                treer_7.position.x = Math.random() * 5 - 30;
                treer_7.position.z = Math.random() * 20 - 4;
                treer_7.position.y = tree_data.y;
                break;
              // front area
              case i > 70 && i < 120:
                const treef_1 = new BABYLON.Sprite("tree", spritetree);
                treef_1.width = tree_data.w;
                treef_1.height = tree_data.h;              
                treef_1.position.x = Math.random() * 24 - 18;
                treef_1.position.z = Math.random() * 15 - 21;
                treef_1.position.y = tree_data.y;
                break;
              default:
                const treef_2 = new BABYLON.Sprite("tree", spritetree);
                treef_2.width = tree_data.w;
                treef_2.height = tree_data.h;
                treef_2.position.x = Math.random() * 7 + 4;
                treef_2.position.z = Math.random() * 20 + 13;
                treef_2.position.y = tree_data.y;
                break;
            }
          }
          break;
        default:
          break;
      }
    }
    lump_setting(light_dark, scene, x, y, z) {
      // ランプを作成する
      switch(true) {
        case !( light_dark == undefined && scene == undefined ):       
          BABYLON.SceneLoader.ImportMeshAsync("", "", "lamp.babylon").then(() =>{
            const lignts = light_dark == 'dark' ? 0.7 : 0;
            const lampLight = new BABYLON.SpotLight("lampLight", BABYLON.Vector3.Zero(), new BABYLON.Vector3(0.5, -1, 0), lignts * Math.PI, 0.01, scene);
                  lampLight.diffuse = BABYLON.Color3.White();
                  lampLight.parent = scene.getMeshByName("bulb");

            const lamp = scene.getMeshByName("lamp");
                  lamp.position = new BABYLON.Vector3(x, y, z); 
                  lamp.rotation = BABYLON.Vector3.Zero();
                  lamp.rotation.y = -Math.PI / 3.5;
                  lamp.position.x = -20;
                  lamp.position.y = 0;
                  lamp.position.z = -6;
          });
          break;
        default:
          break;
      }
    }
    fountain_setting(scene) {
      // 噴水作成
      switch(true) {
        case scene != undefined:
          BABYLON.SceneLoader.ImportMeshAsync("", "", "fountain.babylon").then(() =>  {

            const fountain = scene.getMeshByName("fountain");
                  fountain.position.x = -10.7;
                  fountain.position.y = -0.5;
                  fountain.position.z = 15.8;

            let particleSystem = new BABYLON.ParticleSystem("particles", 5000, scene);
                particleSystem.particleTexture = new BABYLON.Texture("textures/flare/flare.png", scene);
                particleSystem.emitter = new BABYLON.Vector3(-10.7, 3.3, 15.8);
                particleSystem.minEmitBox = new BABYLON.Vector3(0, 0, 0);
                particleSystem.maxEmitBox = new BABYLON.Vector3(0, 0, 0);
                particleSystem.color1 = new BABYLON.Color4(0.1, 0.1, 0.2, 0.8);
                particleSystem.color2 = new BABYLON.Color4(0.1, 0.1, 0.2, 0.8);
                particleSystem.colorDead = new BABYLON.Color4(0.1, 0.1, 0.2, 0.8);

                // パーティクルのサイズ
                particleSystem.minSize = 0.1;
                particleSystem.maxSize = 0.8 / 1.5;
                particleSystem.minLifeTime = 1;
                particleSystem.maxLifeTime = 2.5;
                particleSystem.emitRate = 5000;
                particleSystem.blendMode = BABYLON.ParticleSystem.BLENDMODE_ONEONE;
                particleSystem.gravity = new BABYLON.Vector3(0, -3.81, 0);
    
                // 噴水のばら撒く距離
                particleSystem.direction1 = new BABYLON.Vector3(-1, 1, 1);
                particleSystem.direction2 = new BABYLON.Vector3(1, 1, -1);
                particleSystem.minAngularSpeed = 0;
                particleSystem.maxAngularSpeed = Math.PI;
                particleSystem.minEmitPower = 2;
                particleSystem.maxEmitPower = 4.5;
                particleSystem.updateSpeed = 0.03;
                particleSystem.start();
          });
          break;
        default:
          break;
      }    
    }
    createScene(degree, light_dark, engine, canvas) {
      // シーン作成
      switch(true) {
        case !( light_dark == undefined && degree == undefined ):
          // シーン・カメラ設定
          const scene = new BABYLON.Scene(engine);
          const camera = new BABYLON.ArcRotateCamera("camera", -Math.PI / 2, Math.PI / 2.5, Math.PI / 2.5, new BABYLON.Vector3(0, 0, 0));
          camera.position = new BABYLON.Vector3(30, 30, 30);
          camera.attachControl(canvas, true);

          // 光源設定
          this.pointerLight(light_dark, scene);

          // 空・グランド・水を作成
          this.sky_ground_water_setting(light_dark, this.degree, scene);

          // ティー作成
          this.tea_setting(scene);

          // カップを作成
          this.cup_setting(this.degree, scene);

          // 木を作成
          this.tree_setting(light_dark, scene);
              
          // ランプを作成
          this.lump_setting(light_dark, scene, 0, 2, -20);

          // 噴水を作成
          this.fountain_setting(scene);

          return scene;
          break;
        default:
          break;   
      }     
    };
  }
  new LightDarkmode();
</script>