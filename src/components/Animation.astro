<canvas id="renderCanvas"></canvas>

<script is:inline src="https://preview.babylonjs.com/babylon.js"></script>
<script is:inline src="https://cdn.babylonjs.com/materialsLibrary/babylon.gridMaterial.js"></script>
<script is:inline src="https://code.jquery.com/pep/0.4.1/pep.js"></script>
<script is:inline src="https://unpkg.com/earcut@latest/dist/earcut.min.js"></script>
<script is:inlune src="https://cdn.babylonjs.com/materialsLibrary/babylon.waterMaterial.js"></script>
<script type="text/javascript">
  function main() {
    const canvas = document.getElementById('renderCanvas');
    const engine = new BABYLON.Engine(canvas);

    function degree(degrees) {
      return degrees * (Math.PI / 180);
    }

    const createScene = function () {
      const scene = new BABYLON.Scene(engine);

      const camera = new BABYLON.ArcRotateCamera("camera", -Math.PI / 2, Math.PI / 2.5, 15, new BABYLON.Vector3(0, 0, 0));
      //camera.position = new BABYLON.Vector3(30, 12, 12);
      camera.position = new BABYLON.Vector3(35, 35, 35);
      camera.attachControl(canvas, true);

      const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), scene);
            light.intensity = .6;

      // 空
      const skybox = BABYLON.MeshBuilder.CreateBox("skyBox", {size: 1000}, scene);
      const skyboxMaterial = new BABYLON.StandardMaterial("skyBox", scene);
            skyboxMaterial.backFaceCulling = false;

            skyboxMaterial.reflectionTexture = new BABYLON.CubeTexture("textures/sky/skybox", scene);
            skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;

            skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);
            skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);
            skybox.material = skyboxMaterial;
        

      // グランドを作成
      const largeGroundMat = new BABYLON.StandardMaterial("largeGroundMat");
            largeGroundMat.diffuseTexture = new BABYLON.Texture("textures/ground/valleygrass.png");
      
      const largeGround = BABYLON.MeshBuilder.CreateGroundFromHeightMap("largeGround", "textures/ground/villageheightmap.png", {width:72, height:72, subdivisions: 200, minHeight:0, maxHeight: 8});
            largeGround.material = largeGroundMat;
            largeGround.rotation.y = degree(90);
            largeGround.position.y = -0.5;

      // カップを作成
      const golfcup = BABYLON.MeshBuilder.CreateCylinder("golfcup", {height:1, depth:0.1});

      const golfcupMaterial = new BABYLON.StandardMaterial("doorMaterial", scene);
      golfcupMaterial.diffuseColor = new BABYLON.Color3(0.8, 0.8, 0.8);
      golfcupMaterial.alpha = .9;
      golfcup.material = golfcupMaterial;
      golfcup.position.x = 32;
      golfcup.position.y = 1.92;
      golfcup.position.z = -10.8;
      golfcup.rotation.z = degree(2);
      golfcup.rotation.x = degree(-3);

      // 水を作成
      var waterMesh = BABYLON.Mesh.CreateGround("waterMesh", 20, 37, 10, scene, false);
      var water = new BABYLON.WaterMaterial("water", scene, new BABYLON.Vector2(512, 512));
      water.backFaceCulling = true;
      water.bumpTexture = new BABYLON.Texture("textures/water/waterbump.png", scene);
      water.windForce = -2;
      water.waveHeight = 0.1;
      water.bumpHeight = 0.1;
      water.waterColor = new BABYLON.Color3(0.1, 0.1, 0.2);
      water.colorBlendFactor = 0.5;
      water.addToRenderList(skybox);
      water.addToRenderList(largeGround);
      waterMesh.material = water;
      waterMesh.position.x = 2.9;      
      waterMesh.position.y = 1.7;
      waterMesh.position.z = 16.5;         

      // 木を作成
      // position x 前 + 後 -
      // position y 上 + 下 -
      // position z 左 + 右 -
      const spritetree = new BABYLON.SpriteManager("treesManager", "textures/wood/wood.png", 1000, {width: 538, height: 680}, scene);
        for (let i = 0; i < 340; i++) {
          switch(true) {
            // right side
            case i > 0 && i < 10:
              const treer_1 = new BABYLON.Sprite("tree", spritetree);
              treer_1.width = 2;
              treer_1.height = 3;              
              treer_1.position.x = Math.random() * (11) - 36;
              treer_1.position.z = Math.random() * -1  - 11;
              treer_1.position.y = 3.7;
              break;    
            case i > 11 && i < 30:
              const treer_2 = new BABYLON.Sprite("tree", spritetree);
              treer_2.width = 2;
              treer_2.height = 3;              
              treer_2.position.x = Math.random() * (11) - 28;
              treer_2.position.z = Math.random() * -1  - 14;
              treer_2.position.y = 3.7;
              break;   
            case i > 31 && i < 40:
              const treer_3 = new BABYLON.Sprite("tree", spritetree);
              treer_3.width = 2;
              treer_3.height = 3;              
              treer_3.position.x = Math.random() * (11) - 20;
              treer_3.position.z = Math.random() * -1  - 15;
              treer_3.position.y = 3.5;
              break;
            case i > 41 && i < 50:
              const treer_4 = new BABYLON.Sprite("tree", spritetree);
              treer_4.width = 2;
              treer_4.height = 3;              
              treer_4.position.x = Math.random() * (11) - 12;
              treer_4.position.z = Math.random() * -1  - 16;
              treer_4.position.y = 3.5;
              break;
            case i > 51 && i < 60:
              const treer_5 = new BABYLON.Sprite("tree", spritetree);
              treer_5.width = 2;
              treer_5.height = 3;              
              treer_5.position.x = Math.random() * (11) - 0;
              treer_5.position.z = Math.random() * -1  - 18;
              treer_5.position.y = 3.5;
              break;
            case i > 61 && i < 70:
              const treer_6 = new BABYLON.Sprite("tree", spritetree);
              treer_6.width = 2;
              treer_6.height = 3;              
              treer_6.position.x = Math.random() * (11) + 8;
              treer_6.position.z = Math.random() * -1  - 22;
              treer_6.position.y = 3.5;
              break;
            case i > 71 && i < 80:
              const treer_7 = new BABYLON.Sprite("tree", spritetree);
              treer_7.width = 2;
              treer_7.height = 3;              
              treer_7.position.x = Math.random() * 1 + (32 - ((80 - i) * 1.3 ));
              treer_7.position.z = Math.random() * -1  - (29 - ((80 - i) * .6));
              treer_7.position.y = 3.5;
              break;
            // front area
            case i > 80 && i < 100:
              const tree5 = new BABYLON.Sprite("tree", spritetree);
              tree5.width = 2;
              tree5.height = 3;              
              tree5.position.x = Math.random() * (7) - 20;
              tree5.position.z = Math.random() * 10  + 3;
              tree5.position.y = 3.8;
              break;
            case i > 100 && i < 130:
              const tree6 = new BABYLON.Sprite("tree", spritetree);
              tree6.width = 2;
              tree6.height = 3;              
              tree6.position.x = Math.random() * (6) - 12;
              tree6.position.z = Math.random() * 10  + 12;
              tree6.position.y = 3.8;
              break;
            case i > 130 && i < 150:
              const tree7 = new BABYLON.Sprite("tree", spritetree);
              tree7.width = 2;
              tree7.height = 3;              
              tree7.position.x = Math.random() * (2) - 9;
              tree7.position.z = Math.random() * 6  + 29;
              tree7.position.y = 4;
              break;
            case i > 150 && i < 165:
              const tree8 = new BABYLON.Sprite("tree", spritetree);
              tree8.width = 2;
              tree8.height = 3;              
              tree8.position.x = Math.random() * (2) - 11;
              tree8.position.z = Math.random() * 6  + 29;
              tree8.position.y = 5.2;
              break;
            case i > 165 && i < 172:
              const tree9 = new BABYLON.Sprite("tree", spritetree);
              tree9.width = 2;
              tree9.height = 3;              
              tree9.position.x = Math.random() * (1) - 13;
              tree9.position.z = Math.random() * 3  + 27;
              tree9.position.y = 5.8;
              break;
            case i > 173 && i < 180:
              const tree9_1 = new BABYLON.Sprite("tree", spritetree);
              tree9_1.width = 2;
              tree9_1.height = 3;              
              tree9_1.position.x = Math.random() * (1) - 13;
              tree9_1.position.z = Math.random() * 6  + 29;
              tree9_1.position.y = 6.2;
              break;

            // back
            case i > 180 && i < 200:
              const tree10 = new BABYLON.Sprite("tree", spritetree);
              tree10.width = 2;
              tree10.height = 3;                 
              tree10.position.x = Math.random() * (-1) + 20.5;
              tree10.position.z = Math.random() * 8 + 27;
              tree10.position.y = 4.5;
              break;
            case i > 200 && i < 220:
              const tree11 = new BABYLON.Sprite("tree", spritetree);
              tree11.width = 2;
              tree11.height = 3;                 
              tree11.position.x = Math.random() * (-1) + 22;
              tree11.position.z = Math.random() * 8 + 27;
              tree11.position.y = 5.7;
              break;
            case i > 220 && i < 240:
              const tree12 = new BABYLON.Sprite("tree", spritetree);
              tree12.width = 2;
              tree12.height = 3;                 
              tree12.position.x = Math.random() * (-1) + 23.5;
              tree12.position.z = Math.random() * 10 + 25;
              tree12.position.y = 7;
              break;
            case i > 240 && i < 260:
              const tree13 = new BABYLON.Sprite("tree", spritetree);
              tree13.width = 2;
              tree13.height = 3;                 
              tree13.position.x = Math.random() * (-1) + 25;
              tree13.position.z = Math.random() * 10 + 25;
              tree13.position.y = 7.8;
              break;
            case i > 260 && i < 280:
              const tree14 = new BABYLON.Sprite("tree", spritetree);
              tree14.width = 2;
              tree14.height = 3;                 
              tree14.position.x = Math.random() * (-1) + 26.5;
              tree14.position.z = Math.random() * 10 + 25;
              tree14.position.y = 8.3;
              break;
            case i > 280 && i < 290:
              const tree15 = new BABYLON.Sprite("tree", spritetree);
              tree15.width = 2;
              tree15.height = 3;                 
              tree15.position.x = Math.random() * (-1) + 28;
              tree15.position.z = Math.random() * 5 + 20;
              tree15.position.y = 8.0;
              break;
            case i > 290 && i < 300: 
              const tree16 = new BABYLON.Sprite("tree", spritetree);
              tree16.width = 2;
              tree16.height = 3;                 
              tree16.position.x = Math.random() * (-1) + 28;
              tree16.position.z = Math.random() * 5 + 23;
              tree16.position.y = 8.45;
              break;            
            case i > 300 && i < 320:
              const tree17 = new BABYLON.Sprite("tree", spritetree);
              tree17.width = 2;
              tree17.height = 3;                 
              tree17.position.x = Math.random() * (-1) + 28;
              tree17.position.z = Math.random() * 10 + 25;
              tree17.position.y = 8.7;
              break;
            default:
              const tree = new BABYLON.Sprite("tree", spritetree);
              tree.width = 2;
              tree.height = 3;                 
              tree.position.x = Math.random() * (-5) + 19;
              tree.position.z = Math.random() * 8 + 27;
              tree.position.y = 3.5;
              break;
          }
        }




      var frameRate = 10;

      var yrotation = new BABYLON.Animation("yrotation", "rotation.y", frameRate, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);

      var keyFramesR = []; 

      keyFramesR.push({
          frame: 0,
          value: 0
      });

      keyFramesR.push({
          frame: 1 * frameRate,
          value: 1 * Math.PI
      });

      keyFramesR.push({
          frame: 2 * frameRate,
          value: 2 * Math.PI
      });

      yrotation.setKeys(keyFramesR);

      scene.beginDirectAnimation(camera, [yrotation], 0, 2 * frameRate, true);



      return scene;
    };


    const scene = createScene();
    
    engine.runRenderLoop(() => {
      scene.render();
    });
    
    window.addEventListener('resize', () => {
      engine.resize();
    });
  }
  window.addEventListener('DOMContentLoaded', main);
</script>

<style is:global>
	#renderCanvas {
		width   : 100%;
		height  : 100%;
		touch-action: none;
		top:0;
		left: 0;
	}
</style>